Задание 1. 1. Дополнить модель проекта:

 Сущность Account со следующими атрибутами:
 - id клиента
 - Дебетовый счет или кредитный (enum)
 - Баланс

 Сущность Transaction со следующими атрибутами:
 - id счета
- Сумма транзакции
- Время транзакции

 Cущность DataSourceErrorLog:
 - Текст стектрейса исключения
- Сообщение
- Сигнатура метода

 1.1 Контроллеры к Account и Transaction

 2. Сгенерировать набор данных по сущностям, можно написать генератор самостоятельно, можно использовать сервисы, аналогичные https://www.mockaroo.com/. Просто лишь бы было на чём тестить :)

 3. Разработать аспект:

 3.1 Аспект @LogDataSourceError логирующий сообщения об исключениях в проекте путем создания в БД новой записи DataSourceErrorLog в случае, если в результате CRUD-операций над сущностями возникла ошибка



 ===========================================

   Задание 2.

  1. Изменить аспект @LogDataSourceError: В первую очередь аспект должен отсылать
  сообщение в топик t1_demo_metrics. В заголовке должен указываться
  тип ошибки: DATA_SOURCE; В случае, если отправка не удалась - записать в БД.

  2. Разработать аспект @Metric, принимающий в качестве значения время в миллисекундах.
  Если время работы метода превышает заданное значение, аспект должен отправлять
  сообщение в топик Kafka (t1_demo_metrics) c информацией о времени работы,
  имени метода и параметрах метода, если таковые имеются. В заголовке передать тип
  ошибки METRICS.

  3. Реализовать 2 консьюмера, слушающих топики t1_demo_accounts и t1_demo_transactions.
  При получении сообщения сервис должен сохранять счет и транзакцию в бд.
  (Консьюмер и код, сохраняющий клиента, есть в проекте) В качестве ключей к
  сообщениям можно генерировать случайный UUID.


  ===========================================



Задание 3.

1.

1.1 Сущности Transaction:
- добавить статус [ACCEPTED, REJECTED, BLOCKED, CANCELLED, REQUESTED]
- добавить уникальный transactionId
- добавить timestamp

1.2 Сущности Account:
- добавить статус [ARRESTED, BLOCKED, CLOSED, OPEN]
- добавить уникальный accountId
- добавить поле frozenAmount;

1.3 Сущности Client добавить уникальный clientId

2. Сервис при получении сообщения из топика t1_demo_transactions:
- проверяет статус счета: если статус OPEN, то:
- сохраняет транзакцию в БД со статусом REQUESTED
- изменяет счет клиента на сумму транзакции, отправляет
сообщение в топик t1_demo_transaction_accept с
информацией {clientId, accountId, transactionId, timestamp,
transaction.amount, account.balance}


3. Разработать сервис 2 (приложение):
3.1 Сервис слушает топик t1_demo_transaction_accept
При получении сообщения:
- Если транзакции по одному и тому же клиенту и счету приходят больше N раз
в Т времени (настраивается в конфиге) и timestamp транзакции попадает в этот период,
то N транзакциям присвоить статус BLOCKED, сообщение со статусом, id счета и id
транзакции отправить в топик t1_demo_transaction_result
- Если сумма списания в транзакции больше, чем баланс счета - отправить сообщение
со статусом REJECTED
- Если всё ок, то статус ACCECPTED


4. Сервис 1 теперь слушает еще и топик t1_demo_transaction_result:
- При получении сообщения со статусом ACCECPTED - обновляет статус транзакции в БД
- При получении BLOCKED - обновляет транзакциям статусы в БД и выставляет счёту статус BLOCKED.
Баланс счёта меняется следующим образом: счет корректируется на сумму заблокированных
транзакций, сумма записывается в поле frozenAmount
- При получении REJECTED - обновляет статус транзакции, и на сумму транзакции изменяет баланс

